name: build

on:
  release:
    types: [ published ]
    
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  GO_VERSION: 1.18

jobs:
  go-test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: ${{ env.GO_VERSION }}
    - name: go test
      run: |
        go fmt ./... & \
        go vet ./... & \
        go test ./...
        
  build-linux:
    needs: [ go-test ]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      BINARY_NAME: goproxy-linux-amd64
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Set version to env
        run: echo "VERSION=$(echo ${GITHUB_REF_NAME/v/})" >> $GITHUB_ENV
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Pack linux
        run: GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags "-X go.lstv.dev/goproxy/util.version=$VERSION" -o ${{ runner.temp }}/${{ env.BINARY_NAME }} cmd/goproxy/main.go
      - name: Upload linux artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ runner.temp }}/${{ env.BINARY_NAME }}
          asset_name: ${{ env.BINARY_NAME }}
          asset_content_type: application/x-executable
          
  build-darwin-amd64:
    needs: [ go-test ]
    runs-on: macos-latest
    permissions:
      contents: write
    env:
      BINARY_NAME: goproxy-darwin-amd64
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Set version to env
        run: echo "VERSION=$(echo ${GITHUB_REF_NAME/v/})" >> $GITHUB_ENV
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Pack darwin
        run: GOOS=darwin GOARCH=amd64 go build -ldflags "-X go.lstv.dev/goproxy/util.version=$VERSION" -o ${{ runner.temp }}/${{ env.BINARY_NAME }} cmd/goproxy/main.go
      - name: Upload darwin artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ runner.temp }}/${{ env.BINARY_NAME }}
          asset_name: ${{ env.BINARY_NAME }}
          asset_content_type: application/octet-stream

  build-darwin-arm64:
    needs: [ go-test ]
    runs-on: macos-latest
    permissions:
      contents: write
    env:
      BINARY_NAME: goproxy-darwin-arm64
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Set version to env
        run: echo "VERSION=$(echo ${GITHUB_REF_NAME/v/})" >> $GITHUB_ENV
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Pack darwin
        run: GOOS=darwin GOARCH=arm64 go build -ldflags "-X go.lstv.dev/goproxy/util.version=$VERSION" -o ${{ runner.temp }}/${{ env.BINARY_NAME }} cmd/goproxy/main.go
      - name: Upload darwin artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ runner.temp }}/${{ env.BINARY_NAME }}
          asset_name: ${{ env.BINARY_NAME }}
          asset_content_type: application/octet-stream
          
  build-windows:
    needs: [ go-test ]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      BINARY_NAME: goproxy-windows-amd64.exe
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Set version to env
        run: echo "VERSION=$(echo ${GITHUB_REF_NAME/v/})" >> $GITHUB_ENV
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Pack windows
        run: GOOS=windows GOARCH=amd64 CGO_ENABLED=0 go build -ldflags "-X go.lstv.dev/goproxy/util.version=$VERSION" -o ${{ runner.temp }}/${{ env.BINARY_NAME }} cmd/goproxy/main.go
      - name: Upload windows artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ runner.temp }}/${{ env.BINARY_NAME }}
          asset_name: ${{ env.BINARY_NAME }}
          asset_content_type: application/vnd.microsoft.portable-executable
    
  build-docker:
    needs: [ go-test ]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Set version to env
        run: echo "VERSION=$(echo ${GITHUB_REF_NAME/v/})" >> $GITHUB_ENV
      - name: Log in to the Container registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            GOPROXY_VERSION=${{ env.VERSION }}
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}     
